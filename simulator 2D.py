# -*- coding: utf-8 -*-
"""
N body simulator

Author: Eryn Cangi
For CIERA REU summer 2015

Heavily lifted from http://fiftyexamples.readthedocs.org/en/latest/gravity.html
License is MIT license, free to use and modify as desired for any use.

This one works in 2D, for preliminary testing purposes.
"""

from turtle import *
import numpy as np
from math import sin, cos, atan2
    
class Body(Turtle):
    '''
    Defines a body object and its attributes, i.e. a planet, satellite, etc.
    Inherits from Turtle for easy drawing
    '''

    def __init__(self, name, mass, color, pos, vel):
        Turtle.__init__(self)
        self.name = name
        self.mass = mass
        self.pen(pencolor=color)
        self.position = pos                         # numpy array            
        self.velocity = vel                         #

    def __repr__(self):
        return '{name} at {pos} with speed {vel}, mass {mass}'\
        .format(name = self.name, pos = self.position, vel = self.velocity, 
                mass = self.mass)
        
    def force(self, other):
        '''
        Calculates force between the object and another one
        '''
        
        G = 6.67384 * 10**(-11)

        if self is other:
            raise ValueError("Can't attract object to itself")

        # calculate distance
        # can possibly improve per: http://bit.ly/1I6rLjj
        dr = self.position - other.position         # format [dx, dy]
        r = np.linalg.norm(dr) 
        
        # calculate force
        fg = -(G * self.mass * other.mass) / (r**2)
        
        # calculate direction of force, polar coordinates
        theta = atan2(dr[1], dr[0])
        
        # could collapse later maybe
        gravity_x = fg * cos(theta)
        gravity_y = fg * sin(theta)
        gravity = np.array([gravity_x, gravity_y])
        
        return gravity
        
        
def info(step, bodies, AU):
    '''
    Fills numpy arrays with data generated by simulation
    '''
    
    print('Step #{}'.format(step))
    for body in bodies:
        s = '{:<8}  Pos.={:>6.2f} {:>6.2f} Vel.={:>10.3f} {:>10.3f}'.format(
            body.name, body.position[0]/AU, body.position[1]/AU, \
            body.velocity[0], body.velocity[1])
        print(s)
    print()


def run(bodies, SCALE, AU):
    '''
    Runs the main simulation
    '''
    
    timestep = 24*3600                  # start with one day as the time step
    
    for body in bodies:
        body.penup()
        body.hideturtle()
      
    step = 1
    while True:
        info(step, bodies, AU)
        step += 1

        force = {}                     # dictionary of forces from other bodies
        
        # Add up all of the forces exerted on 'body'.
        for body in bodies:
            total_fx = total_fy = 0.0
            for other in bodies:
                if body is other:               # ignore force by body on self
                    continue
                grav_vector = body.force(other)
                total_fx += grav_vector[0]
                total_fy += grav_vector[1]
        
            # Record the total force exerted in a dictionary
            force[body] = (total_fx, total_fy)
        
        # Update velocities based on the force; velocity = accel * time
        for body in bodies:
            fx, fy = force[body]
            body.velocity += (np.array([fx, fy]) / body.mass) * timestep
        
            # Update positions and draw on canvas; position = vel * time
            body.position += body.velocity * timestep
            body.goto(body.position[0]*SCALE, body.position[1]*SCALE)
            
            if body.name == 'Sun':
                body.dot(50)
            elif body.name == 'Earth':
                body.dot(5)
        
        if step == 1000:
            break


def main():
    '''
    Main loop
    '''  
    
    # Set the mood
    bgcolor('black')
    
    # Assumed scale: 100 pixels = 1AU.
    AU = 149.6e9     # 149.6 billion meters.
    SCALE = 250 / AU
    
    # Declare positions and velocities for two bodies
    sun_pos = np.array([0,0])
    sun_vel = [0,0]
    earth_pos = np.array([-1*AU, 0])
    earth_vel = np.array([0, 3e4])              # earth = 30 km per sec
    
    sun = Body('Sun', 2e30, 'yellow', sun_pos, sun_vel)
    earth = Body('Earth', 5.9742e24, 'blue', earth_pos, earth_vel)

    run([sun, earth], SCALE, AU)
    
    
if __name__ == '__main__':
    main()
