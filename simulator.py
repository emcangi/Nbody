# -*- coding: utf-8 -*-
"""
N body simulator

Author: Eryn Cangi
For CIERA REU summer 2015

Heavily lifted from http://fiftyexamples.readthedocs.org/en/latest/gravity.html
License is MIT license, free to use and modify as desired for any use
"""

import turtle as t
import numpy as np
from math import sin, cos
    
class Body(t.Turtle):
    '''
    Defines a body object and its attributes, i.e. a planet, satellite, etc.
    Inherits from Turtle for easy drawing
    '''

    def __init__(self, name, mass, color, pos, vel):
        self.name = name
        self.mass = mass
        self.pencolor = color
        self.position = pos                         # numpy array            
        self.velocity = vel                         #

    def __repr__(self):
        return '{name} at {pos} with speed {vel}, mass {mass}'\
        .format(name = self.name, pos = self.position, vel = self.velocity, 
                mass = self.mass)
        
    def force(self, other):
        '''
        Calculates force between the object and another one
        '''
        
        G = 6.67384 * 10**(-11)

        if self is other:
            raise ValueError("Can't attract object to itself")

        # calculate distance
        # can possibly improve per: http://bit.ly/1I6rLjj
        dr = self.position - other.position         # format [dx, dy, dz]
        r = np.linalg.norm(dr) 
        
        # calculate force
        fg = (G * self.mass * other.mass) / r^2
        
        # calculate direction of force, theta = azimuthal, phi = polar
        theta = np.arctan(dr[1] / dr[0])
        phi = np.arccos(dr[2] / r)
        
        # could collapse later maybe
        gravity_x = fg * cos(theta) * sin(phi)
        gravity_y = fg * sin(theta) * sin(phi)
        gravity_z = fg * cos(phi)
        
        gravity = np.array([gravity_x, gravity_y, gravity_z])
        
        return gravity
        
        
def fill_arrays():
    '''
    Fills numpy arrays with data generated by simulation
    '''
    pass


def run():
    '''
    Runs the main simulation
    '''
    pass


def main():
    '''
    Main loop
    '''  
    
    # Assumed scale: 100 pixels = 1AU.
    AU = (149.6e9)     # 149.6 billion meters.
    SCALE = 250 / AU
    
    sun_pos = np.array([0,0,0])
    sun_vel = [0,0,0]
    earth_pos = np.array([1*AU, 0, 0])
    earth_vel = np.array([0, 3e4])              # earth = 30 km per sec
    
    sun = Body('Sun', 2e30, 'yellow', sun_pos, sun_vel), 
    earth = Body('Earth', 5.9742e24, 'blue', earth_pos, earth_vel)


# test code
'''
saturn = Body('Saturn', 6 * 10**(26), 'yellow', np.array([1,1,1]), 0)
particle = Body('dust mote', 1 * 10**(-4), 'blue', np.array([10,10,10]), 0)

print(saturn)
print(particle)
'''